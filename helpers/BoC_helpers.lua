local EID = {}
EID.itemConfig = Isaac.GetItemConfig()
EID.Config = {}
EID.Config["BagOfCraftingModdedRecipes"] = true
EID.itemUnlockStates = {}
EID.XMLMaxItemID = 732
--The fixed recipes, for use in Bag of Crafting
EID.XMLRecipes = {["29,29,29,29,29,29,29,29"] = 36, ["8,8,8,8,8,8,8,8"] = 177, ["1,1,1,1,1,1,1,1"] = 45, ["2,2,2,2,2,2,2,2"] = 686, ["3,3,3,3,3,3,3,3"] = 118, ["12,12,12,12,12,12,12,12"] = 343, ["15,15,15,15,15,15,15,15"] = 37, ["21,21,21,21,21,21,21,21"] = 85, ["1,2,4,4,4,4,4,5"] = 331, ["4,4,4,4,4,4,4,4"] = 182, ["22,22,22,22,22,22,22,22"] = 75, ["3,22,22,22,22,22,22,22"] = 654, ["1,1,1,1,1,1,7,7"] = 639, ["12,12,12,12,12,12,13,13"] = 175, ["17,17,17,17,17,17,17,17"] = 483, ["15,15,15,15,15,15,16,16"] = 483, ["6,6,6,6,6,6,6,6"] = 628, ["24,24,24,24,24,24,24,24"] = 489, ["25,25,25,25,25,25,25,25"] = 580, }

--The contents of each item pool, and the item's weight, for use in Bag of Crafting
EID.XMLItemPools = {{{1, 1.0}, {2, 1.0}, {3, 1.0}, {4, 1.0}, {5, 1.0}, {6, 1.0}, {7, 1.0}, {8, 1.0}, {10, 1.0}, {12, 0.5}, {13, 1.0}, {14, 1.0}, {15, 1.0}, {17, 0.1}, {19, 1.0}, {36, 1.0}, {37, 1.0}, {38, 1.0}, {39, 1.0}, {40, 1.0}, {41, 1.0}, {42, 1.0}, {44, 1.0}, {45, 1.0}, {46, 1.0}, {47, 1.0}, {48, 1.0}, {49, 1.0}, {52, 1.0}, {53, 1.0}, {55, 1.0}, {56, 1.0}, {57, 1.0}, {58, 1.0}, {62, 1.0}, {65, 1.0}, {66, 1.0}, {67, 1.0}, {68, 1.0}, {69, 1.0}, {71, 1.0}, {72, 1.0}, {75, 1.0}, {76, 1.0}, {77, 1.0}, {78, 1.0}, {85, 1.0}, {86, 1.0}, {87, 1.0}, {88, 1.0}, {89, 1.0}, {91, 1.0}, {92, 1.0}, {93, 1.0}, {94, 1.0}, {95, 1.0}, {96, 1.0}, {97, 1.0}, {98, 0.2}, {99, 1.0}, {100, 1.0}, {101, 0.5}, {102, 1.0}, {103, 1.0}, {104, 1.0}, {105, 1.0}, {106, 1.0}, {107, 1.0}, {108, 1.0}, {109, 1.0}, {110, 1.0}, {111, 1.0}, {113, 1.0}, {114, 0.2}, {115, 1.0}, {117, 1.0}, {120, 1.0}, {121, 1.0}, {123, 1.0}, {124, 1.0}, {125, 1.0}, {126, 0.5}, {127, 1.0}, {128, 1.0}, {129, 1.0}, {131, 1.0}, {136, 1.0}, {137, 1.0}, {138, 1.0}, {140, 1.0}, {142, 1.0}, {143, 1.0}, {144, 1.0}, {146, 1.0}, {148, 1.0}, {149, 1.0}, {150, 1.0}, {151, 1.0}, {152, 1.0}, {153, 1.0}, {154, 1.0}, {155, 1.0}, {157, 1.0}, {160, 1.0}, {161, 1.0}, {162, 1.0}, {163, 1.0}, {166, 1.0}, {167, 1.0}, {169, 1.0}, {170, 1.0}, {171, 1.0}, {172, 1.0}, {173, 1.0}, {174, 1.0}, {175, 1.0}, {176, 1.0}, {178, 1.0}, {180, 1.0}, {186, 1.0}, {188, 1.0}, {189, 1.0}, {190, 0.1}, {191, 1.0}, {192, 1.0}, {200, 1.0}, {201, 1.0}, {202, 1.0}, {206, 1.0}, {209, 1.0}, {210, 1.0}, {211, 1.0}, {213, 1.0}, {214, 1.0}, {217, 1.0}, {220, 1.0}, {221, 1.0}, {222, 1.0}, {223, 1.0}, {224, 1.0}, {225, 1.0}, {227, 1.0}, {228, 1.0}, {229, 1.0}, {231, 1.0}, {233, 1.0}, {234, 1.0}, {236, 1.0}, {237, 0.2}, {240, 1.0}, {242, 1.0}, {244, 1.0}, {245, 1.0}, {256, 1.0}, {257, 1.0}, {261, 1.0}, {264, 1.0}, {265, 1.0}, {266, 1.0}, {267, 1.0}, {268, 1.0}, {269, 1.0}, {270, 1.0}, {271, 1.0}, {272, 1.0}, {273, 1.0}, {274, 1.0}, {275, 1.0}, {276, 1.0}, {277, 1.0}, {278, 1.0}, {279, 1.0}, {280, 1.0}, {281, 1.0}, {282, 1.0}, {283, 1.0}, {284, 1.0}, {285, 1.0}, {287, 1.0}, {288, 1.0}, {291, 1.0}, {292, 1.0}, {294, 1.0}, {295, 1.0}, {298, 1.0}, {299, 1.0}, {300, 1.0}, {301, 1.0}, {302, 1.0}, {303, 1.0}, {304, 1.0}, {305, 1.0}, {306, 1.0}, {307, 1.0}, {308, 1.0}, {309, 1.0}, {310, 1.0}, {312, 1.0}, {313, 0.2}, {314, 1.0}, {315, 1.0}, {316, 1.0}, {317, 1.0}, {318, 1.0}, {319, 1.0}, {320, 1.0}, {321, 1.0}, {322, 1.0}, {323, 1.0}, {324, 1.0}, {325, 1.0}, {329, 1.0}, {330, 1.0}, {332, 1.0}, {333, 0.2}, {334, 0.2}, {335, 0.2}, {336, 1.0}, {350, 1.0}, {351, 1.0}, {352, 1.0}, {353, 1.0}, {358, 1.0}, {359, 1.0}, {361, 1.0}, {362, 1.0}, {364, 1.0}, {365, 1.0}, {366, 1.0}, {367, 1.0}, {368, 1.0}, {369, 1.0}, {371, 1.0}, {373, 1.0}, {374, 0.2}, {375, 1.0}, {377, 1.0}, {378, 1.0}, {379, 1.0}, {381, 1.0}, {382, 1.0}, {384, 1.0}, {385, 1.0}, {386, 1.0}, {388, 1.0}, {389, 1.0}, {390, 1.0}, {391, 1.0}, {392, 1.0}, {393, 1.0}, {394, 1.0}, {395, 1.0}, {397, 1.0}, {398, 1.0}, {401, 1.0}, {404, 1.0}, {405, 1.0}, {406, 1.0}, {407, 1.0}, {410, 1.0}, {411, 1.0}, {418, 1.0}, {419, 1.0}, {421, 1.0}, {422, 1.0}, {426, 1.0}, {427, 1.0}, {430, 1.0}, {431, 1.0}, {432, 1.0}, {435, 1.0}, {436, 1.0}, {437, 1.0}, {440, 1.0}, {443, 1.0}, {444, 1.0}, {445, 1.0}, {446, 1.0}, {447, 1.0}, {448, 1.0}, {449, 1.0}, {452, 1.0}, {453, 1.0}, {454, 1.0}, {457, 1.0}, {458, 1.0}, {459, 1.0}, {460, 1.0}, {461, 1.0}, {463, 1.0}, {465, 1.0}, {466, 1.0}, {467, 1.0}, {469, 1.0}, {470, 1.0}, {471, 1.0}, {473, 1.0}, {476, 1.0}, {478, 1.0}, {481, 1.0}, {482, 1.0}, {485, 1.0}, {488, 1.0}, {491, 1.0}, {492, 1.0}, {493, 1.0}, {494, 1.0}, {495, 1.0}, {496, 1.0}, {497, 1.0}, {502, 1.0}, {504, 1.0}, {506, 1.0}, {507, 1.0}, {508, 1.0}, {509, 1.0}, {511, 1.0}, {512, 1.0}, {513, 1.0}, {516, 1.0}, {517, 1.0}, {522, 1.0}, {524, 1.0}, {525, 1.0}, {529, 1.0}, {531, 1.0}, {532, 1.0}, {537, 1.0}, {539, 1.0}, {540, 1.0}, {542, 1.0}, {543, 1.0}, {544, 1.0}, {545, 1.0}, {548, 1.0}, {549, 1.0}, {553, 1.0}, {555, 1.0}, {557, 1.0}, {558, 1.0}, {559, 1.0}, {560, 1.0}, {561, 1.0}, {563, 1.0}, {565, 1.0}, {570, 1.0}, {575, 1.0}, {576, 1.0}, {578, 1.0}, {581, 1.0}, {583, 1.0}, {605, 1.0}, {607, 1.0}, {608, 1.0}, {609, 0.5}, {610, 1.0}, {611, 1.0}, {612, 1.0}, {614, 1.0}, {615, 1.0}, {616, 1.0}, {617, 1.0}, {618, 1.0}, {625, 0.1}, {629, 1.0}, {631, 1.0}, {635, 1.0}, {637, 1.0}, {639, 1.0}, {641, 1.0}, {645, 1.0}, {649, 1.0}, {650, 0.5}, {652, 1.0}, {655, 1.0}, {657, 1.0}, {658, 1.0}, {661, 1.0}, {663, 1.0}, {671, 1.0}, {675, 1.0}, {676, 1.0}, {677, 0.2}, {678, 1.0}, {680, 1.0}, {681, 1.0}, {682, 1.0}, {683, 1.0}, {687, 1.0}, {690, 1.0}, {693, 1.0}, {695, 1.0}, {703, 0.5}, {709, 1.0}, {710, 1.0}, {713, 1.0}, {717, 1.0}, {720, 1.0}, {722, 1.0}, {723, 0.1}, {724, 1.0}, {725, 1.0}, {726, 1.0}, {727, 1.0}, {728, 0.5}, {729, 1.0}}, -- treasure
{{21, 1.0}, {33, 1.0}, {54, 1.0}, {60, 1.0}, {63, 1.0}, {64, 1.0}, {75, 1.0}, {85, 1.0}, {102, 1.0}, {116, 1.0}, {137, 1.0}, {139, 1.0}, {147, 1.0}, {156, 1.0}, {164, 1.0}, {177, 1.0}, {195, 1.0}, {199, 1.0}, {203, 1.0}, {204, 1.0}, {205, 1.0}, {208, 1.0}, {227, 1.0}, {232, 1.0}, {246, 1.0}, {247, 1.0}, {248, 1.0}, {249, 1.0}, {250, 1.0}, {251, 1.0}, {252, 1.0}, {260, 1.0}, {286, 0.5}, {289, 1.0}, {290, 1.0}, {295, 1.0}, {296, 1.0}, {297, 1.0}, {337, 1.0}, {338, 1.0}, {347, 1.0}, {348, 1.0}, {349, 1.0}, {356, 1.0}, {357, 1.0}, {372, 1.0}, {376, 1.0}, {380, 1.0}, {383, 1.0}, {396, 1.0}, {402, 0.5}, {403, 1.0}, {414, 1.0}, {416, 1.0}, {422, 1.0}, {424, 0.5}, {425, 1.0}, {434, 1.0}, {439, 1.0}, {451, 1.0}, {472, 1.0}, {475, 0.2}, {479, 1.0}, {480, 1.0}, {483, 0.5}, {485, 0.5}, {486, 1.0}, {487, 1.0}, {505, 1.0}, {514, 1.0}, {515, 1.0}, {518, 1.0}, {520, 1.0}, {521, 1.0}, {523, 1.0}, {527, 1.0}, {534, 1.0}, {535, 1.0}, {566, 1.0}, {585, 1.0}, {599, 1.0}, {602, 1.0}, {603, 1.0}, {604, 1.0}, {619, 1.0}, {621, 1.0}, {623, 1.0}, {624, 1.0}, {638, 1.0}, {642, 0.1}, {647, 1.0}, {660, 0.5}, {670, 1.0}, {716, 1.0}, {719, 0.5}}, -- shop
{{14, 1.0}, {22, 1.0}, {23, 1.0}, {24, 1.0}, {25, 1.0}, {26, 1.0}, {27, 1.0}, {28, 1.0}, {29, 1.0}, {30, 1.0}, {31, 1.0}, {32, 1.0}, {51, 1.0}, {70, 1.0}, {92, 0.5}, {141, 1.0}, {143, 1.0}, {165, 1.0}, {176, 1.0}, {183, 1.0}, {193, 1.0}, {194, 1.0}, {195, 1.0}, {196, 1.0}, {197, 1.0}, {198, 1.0}, {218, 1.0}, {219, 1.0}, {240, 1.0}, {253, 1.0}, {254, 1.0}, {255, 1.0}, {339, 1.0}, {340, 1.0}, {341, 1.0}, {342, 1.0}, {343, 1.0}, {344, 1.0}, {345, 1.0}, {346, 1.0}, {354, 1.0}, {355, 1.0}, {370, 1.0}, {428, 0.5}, {438, 1.0}, {455, 1.0}, {456, 1.0}, {538, 1.0}, {541, 1.0}, {547, 1.0}, {564, 1.0}, {600, 1.0}, {624, 1.0}, {644, 1.0}, {659, 1.0}, {707, 1.0}, {708, 1.0}, {730, 1.0}, {731, 1.0}}, -- boss
{{8, 1.0}, {34, 1.0}, {35, 1.0}, {51, 1.0}, {67, 1.0}, {74, 1.0}, {79, 1.0}, {80, 1.0}, {81, 1.0}, {82, 1.0}, {83, 1.0}, {84, 1.0}, {97, 1.0}, {109, 1.0}, {113, 1.0}, {114, 1.0}, {115, 1.0}, {118, 1.0}, {122, 1.0}, {123, 1.0}, {127, 0.2}, {133, 1.0}, {134, 1.0}, {145, 1.0}, {157, 1.0}, {159, 1.0}, {163, 1.0}, {172, 1.0}, {186, 1.0}, {187, 1.0}, {212, 1.0}, {215, 1.0}, {216, 1.0}, {225, 1.0}, {230, 1.0}, {237, 1.0}, {241, 1.0}, {259, 1.0}, {262, 1.0}, {268, 1.0}, {269, 1.0}, {275, 1.0}, {278, 1.0}, {292, 1.0}, {311, 1.0}, {360, 1.0}, {391, 1.0}, {399, 1.0}, {408, 1.0}, {409, 1.0}, {411, 1.0}, {412, 1.0}, {417, 1.0}, {420, 1.0}, {431, 1.0}, {433, 1.0}, {441, 0.2}, {442, 1.0}, {462, 1.0}, {468, 1.0}, {475, 0.2}, {477, 0.5}, {498, 1.0}, {503, 1.0}, {519, 1.0}, {526, 1.0}, {530, 1.0}, {536, 1.0}, {545, 1.0}, {554, 1.0}, {556, 1.0}, {569, 1.0}, {572, 1.0}, {577, 1.0}, {606, 1.0}, {634, 1.0}, {646, 1.0}, {654, 1.0}, {665, 1.0}, {672, 1.0}, {679, 1.0}, {684, 1.0}, {692, 1.0}, {694, 0.5}, {695, 1.0}, {698, 1.0}, {699, 1.0}, {702, 1.0}, {704, 0.5}, {705, 0.5}, {706, 0.5}, {712, 0.5}, {728, 1.0}}, -- devil
{{7, 1.0}, {33, 1.0}, {72, 1.0}, {98, 1.0}, {101, 1.0}, {108, 1.0}, {112, 1.0}, {124, 1.0}, {142, 1.0}, {146, 1.0}, {156, 1.0}, {162, 1.0}, {173, 1.0}, {178, 1.0}, {182, 1.0}, {184, 1.0}, {185, 1.0}, {243, 1.0}, {313, 1.0}, {326, 1.0}, {331, 1.0}, {332, 1.0}, {333, 1.0}, {334, 1.0}, {335, 1.0}, {363, 1.0}, {374, 1.0}, {387, 1.0}, {390, 1.0}, {400, 1.0}, {413, 1.0}, {415, 1.0}, {423, 1.0}, {464, 1.0}, {477, 0.5}, {490, 1.0}, {498, 1.0}, {499, 1.0}, {510, 0.4}, {519, 1.0}, {526, 1.0}, {528, 1.0}, {533, 1.0}, {543, 1.0}, {567, 1.0}, {568, 1.0}, {573, 1.0}, {574, 1.0}, {579, 1.0}, {584, 0.5}, {586, 1.0}, {601, 1.0}, {622, 1.0}, {634, 1.0}, {640, 1.0}, {643, 1.0}, {651, 1.0}, {653, 1.0}, {685, 1.0}, {686, 1.0}, {691, 0.5}, {696, 1.0}}, -- angel
{{11, 1.0}, {16, 1.0}, {17, 1.0}, {20, 1.0}, {35, 1.0}, {84, 1.0}, {120, 1.0}, {121, 1.0}, {127, 1.0}, {168, 1.0}, {190, 1.0}, {213, 1.0}, {226, 1.0}, {242, 1.0}, {258, 1.0}, {262, 1.0}, {263, 1.0}, {271, 1.0}, {286, 1.0}, {287, 1.0}, {316, 1.0}, {321, 1.0}, {348, 1.0}, {388, 1.0}, {389, 1.0}, {402, 1.0}, {405, 1.0}, {424, 1.0}, {450, 1.0}, {489, 1.0}, {500, 1.0}, {501, 1.0}, {546, 1.0}, {562, 1.0}, {571, 1.0}, {580, 1.0}, {582, 1.0}, {609, 1.0}, {612, 1.0}, {625, 1.0}, {628, 1.0}, {632, 1.0}, {636, 1.0}, {664, 1.0}, {667, 1.0}, {669, 1.0}, {674, 1.0}, {675, 1.0}, {677, 1.0}, {688, 1.0}, {689, 1.0}, {691, 0.5}, {697, 0.5}, {700, 1.0}, {701, 1.0}, {703, 1.0}, {711, 1.0}, {716, 1.0}, {717, 1.0}, {719, 1.0}, {721, 1.0}, {723, 1.0}}, -- secret
{{33, 1.0}, {34, 1.0}, {35, 1.0}, {58, 1.0}, {65, 1.0}, {78, 1.0}, {97, 1.0}, {123, 1.0}, {192, 1.0}, {282, 1.0}, {287, 1.0}, {292, 1.0}, {545, 1.0}, {584, 0.2}, {712, 0.2}}, -- library
{{9, 1.0}, {36, 1.0}, {209, 1.0}, {378, 1.0}, {504, 1.0}, {576, 1.0}}, -- shellGame
{{28, 1.0}, {29, 1.0}, {32, 1.0}, {74, 1.0}, {179, 0.5}, {194, 1.0}, {196, 1.0}, {255, 1.0}, {341, 1.0}, {343, 1.0}, {344, 1.0}, {354, 1.0}, {355, 1.0}, {370, 1.0}, {428, 0.5}, {438, 1.0}, {444, 0.1}, {455, 1.0}, {456, 1.0}, {534, 0.5}, {571, 0.1}, {644, 1.0}, {708, 1.0}, {730, 1.0}, {732, 1.0}}, -- goldenChest
{{81, 1.0}, {133, 1.0}, {134, 1.0}, {140, 1.0}, {145, 1.0}, {212, 1.0}, {297, 1.0}, {316, 1.0}, {371, 1.0}, {475, 0.1}, {565, 0.5}, {580, 0.1}, {642, 1.0}, {654, 0.2}, {665, 1.0}}, -- redChest
{{21, 1.0}, {22, 1.0}, {23, 1.0}, {24, 1.0}, {25, 1.0}, {26, 1.0}, {46, 1.0}, {54, 1.0}, {102, 1.0}, {111, 1.0}, {144, 1.0}, {177, 1.0}, {180, 1.0}, {195, 1.0}, {198, 1.0}, {204, 1.0}, {246, 1.0}, {271, 1.0}, {294, 1.0}, {362, 1.0}, {376, 1.0}, {385, 1.0}, {447, 1.0}, {455, 1.0}, {456, 1.0}, {485, 1.0}, {707, 1.0}}, -- beggar
{{13, 1.0}, {14, 1.0}, {51, 1.0}, {70, 1.0}, {79, 1.0}, {80, 1.0}, {82, 0.2}, {83, 1.0}, {87, 1.0}, {102, 1.0}, {122, 1.0}, {126, 1.0}, {127, 0.5}, {143, 1.0}, {159, 0.2}, {195, 1.0}, {216, 1.0}, {225, 1.0}, {230, 0.2}, {240, 1.0}, {241, 1.0}, {259, 1.0}, {262, 1.0}, {278, 1.0}, {340, 1.0}, {345, 1.0}, {409, 1.0}, {420, 1.0}, {475, 0.2}, {487, 1.0}, {493, 1.0}, {496, 1.0}, {503, 1.0}, {672, 0.5}, {676, 1.0}}, -- demonBeggar
{{51, 1.0}, {79, 1.0}, {80, 1.0}, {81, 1.0}, {126, 1.0}, {133, 1.0}, {134, 1.0}, {145, 1.0}, {212, 1.0}, {215, 1.0}, {216, 1.0}, {225, 1.0}, {241, 1.0}, {260, 1.0}, {371, 1.0}, {408, 1.0}, {442, 1.0}, {451, 1.0}, {468, 1.0}, {475, 0.2}, {496, 1.0}, {503, 1.0}, {536, 1.0}, {565, 1.0}, {569, 1.0}, {580, 1.0}, {642, 1.0}, {654, 0.5}, {692, 1.0}, {694, 0.5}, {697, 0.5}, {702, 1.0}, {711, 1.0}}, -- curse
{{10, 1.0}, {57, 1.0}, {128, 1.0}, {175, 1.0}, {199, 1.0}, {264, 1.0}, {272, 1.0}, {279, 1.0}, {320, 1.0}, {343, 1.0}, {364, 1.0}, {365, 1.0}, {388, 1.0}, {426, 1.0}, {430, 1.0}, {492, 1.0}, {527, 1.0}, {580, 1.0}, {581, 1.0}, {629, 1.0}, {649, 1.0}, {693, 1.0}}, -- keyMaster
{{63, 1.0}, {116, 1.0}, {205, 1.0}, {356, 1.0}, {372, 1.0}, {494, 0.1}, {520, 1.0}, {559, 0.1}, {603, 1.0}, {647, 1.0}}, -- batteryBum
{{29, 1.0}, {30, 1.0}, {31, 1.0}, {39, 1.0}, {41, 1.0}, {55, 1.0}, {102, 1.0}, {110, 1.0}, {114, 0.1}, {139, 1.0}, {195, 1.0}, {199, 1.0}, {200, 1.0}, {217, 1.0}, {228, 1.0}, {355, 1.0}, {439, 1.0}, {508, 1.0}, {580, 0.5}, {732, 1.0}}, -- momsChest
{{1, 1.0}, {2, 1.0}, {3, 1.0}, {4, 1.0}, {5, 1.0}, {6, 1.0}, {7, 1.0}, {8, 1.0}, {10, 1.0}, {12, 0.5}, {13, 1.0}, {34, 1.0}, {35, 1.0}, {37, 1.0}, {38, 1.0}, {42, 1.0}, {45, 1.0}, {47, 1.0}, {48, 1.0}, {50, 1.0}, {52, 1.0}, {55, 1.0}, {56, 1.0}, {57, 1.0}, {62, 1.0}, {64, 1.0}, {65, 1.0}, {67, 1.0}, {68, 1.0}, {69, 1.0}, {77, 1.0}, {78, 1.0}, {85, 1.0}, {87, 1.0}, {88, 1.0}, {89, 1.0}, {93, 1.0}, {94, 1.0}, {95, 1.0}, {96, 1.0}, {97, 1.0}, {98, 0.2}, {99, 1.0}, {100, 1.0}, {101, 0.5}, {102, 1.0}, {103, 1.0}, {104, 1.0}, {106, 1.0}, {107, 1.0}, {108, 1.0}, {110, 1.0}, {111, 1.0}, {114, 0.2}, {115, 1.0}, {117, 1.0}, {120, 1.0}, {121, 1.0}, {124, 1.0}, {125, 1.0}, {126, 0.5}, {128, 1.0}, {131, 1.0}, {132, 1.0}, {137, 1.0}, {138, 1.0}, {140, 1.0}, {142, 1.0}, {146, 1.0}, {148, 1.0}, {149, 1.0}, {150, 1.0}, {151, 1.0}, {152, 1.0}, {153, 1.0}, {154, 1.0}, {155, 1.0}, {157, 1.0}, {161, 1.0}, {162, 1.0}, {163, 1.0}, {167, 1.0}, {169, 1.0}, {170, 1.0}, {172, 1.0}, {174, 1.0}, {175, 1.0}, {186, 1.0}, {188, 1.0}, {189, 1.0}, {191, 1.0}, {192, 1.0}, {200, 1.0}, {201, 1.0}, {206, 1.0}, {209, 1.0}, {210, 1.0}, {213, 1.0}, {214, 1.0}, {217, 1.0}, {220, 1.0}, {221, 1.0}, {222, 1.0}, {223, 1.0}, {224, 1.0}, {226, 1.0}, {228, 1.0}, {229, 1.0}, {231, 1.0}, {233, 1.0}, {234, 1.0}, {236, 1.0}, {237, 0.2}, {242, 1.0}, {244, 1.0}, {245, 1.0}, {254, 1.0}, {256, 1.0}, {257, 1.0}, {258, 0.1}, {261, 1.0}, {264, 1.0}, {265, 1.0}, {266, 1.0}, {267, 1.0}, {268, 1.0}, {269, 1.0}, {271, 1.0}, {273, 1.0}, {274, 1.0}, {277, 1.0}, {279, 1.0}, {280, 1.0}, {281, 1.0}, {288, 1.0}, {291, 1.0}, {299, 1.0}, {300, 1.0}, {301, 1.0}, {302, 1.0}, {303, 1.0}, {305, 1.0}, {306, 1.0}, {307, 1.0}, {308, 1.0}, {309, 1.0}, {310, 1.0}, {312, 1.0}, {315, 1.0}, {316, 1.0}, {317, 1.0}, {318, 1.0}, {319, 1.0}, {320, 1.0}, {321, 1.0}, {322, 1.0}, {325, 1.0}, {329, 1.0}, {330, 1.0}, {332, 1.0}, {333, 0.2}, {334, 0.2}, {335, 0.2}, {336, 1.0}, {349, 1.0}, {351, 1.0}, {352, 1.0}, {353, 1.0}, {357, 1.0}, {358, 1.0}, {359, 1.0}, {362, 1.0}, {364, 1.0}, {365, 1.0}, {366, 1.0}, {367, 1.0}, {368, 1.0}, {369, 1.0}, {371, 1.0}, {373, 1.0}, {374, 0.2}, {375, 1.0}, {377, 1.0}, {378, 1.0}, {379, 1.0}, {380, 1.0}, {382, 1.0}, {383, 1.0}, {384, 1.0}, {389, 1.0}, {391, 1.0}, {392, 1.0}, {393, 1.0}, {394, 1.0}, {395, 1.0}, {397, 1.0}, {398, 1.0}, {401, 1.0}, {407, 1.0}, {410, 1.0}, {411, 1.0}, {416, 1.0}, {421, 1.0}, {425, 1.0}, {426, 1.0}, {430, 1.0}, {431, 1.0}, {432, 1.0}, {434, 1.0}, {436, 1.0}, {440, 1.0}, {443, 1.0}, {444, 1.0}, {445, 1.0}, {446, 1.0}, {447, 1.0}, {448, 1.0}, {449, 1.0}, {450, 1.0}, {452, 1.0}, {453, 1.0}, {454, 1.0}, {457, 1.0}, {458, 1.0}, {459, 1.0}, {460, 1.0}, {461, 1.0}, {463, 1.0}, {465, 1.0}, {466, 1.0}, {467, 1.0}, {469, 1.0}, {470, 1.0}, {471, 1.0}, {473, 1.0}, {493, 1.0}, {494, 1.0}, {495, 1.0}, {496, 1.0}, {497, 1.0}, {502, 1.0}, {503, 1.0}, {504, 1.0}, {506, 1.0}, {507, 1.0}, {508, 1.0}, {509, 1.0}, {511, 1.0}, {512, 1.0}, {513, 1.0}, {514, 1.0}, {515, 1.0}, {516, 1.0}, {517, 1.0}, {518, 1.0}, {520, 1.0}, {522, 1.0}, {524, 1.0}, {525, 1.0}, {529, 1.0}, {531, 1.0}, {532, 1.0}, {537, 1.0}, {539, 1.0}, {540, 1.0}, {542, 1.0}, {543, 1.0}, {544, 1.0}, {545, 1.0}, {548, 1.0}, {549, 1.0}, {553, 1.0}, {555, 1.0}, {557, 1.0}, {558, 1.0}, {559, 1.0}, {560, 1.0}, {561, 1.0}, {563, 1.0}, {565, 1.0}, {570, 1.0}, {575, 1.0}, {576, 1.0}, {578, 1.0}, {581, 1.0}, {583, 1.0}, {605, 1.0}, {607, 1.0}, {608, 1.0}, {609, 0.5}, {610, 1.0}, {611, 1.0}, {612, 1.0}, {614, 1.0}, {615, 1.0}, {616, 1.0}, {617, 1.0}, {618, 1.0}, {625, 0.5}, {629, 1.0}, {631, 1.0}, {635, 1.0}, {637, 1.0}, {639, 1.0}, {641, 1.0}, {645, 1.0}, {649, 1.0}, {650, 0.5}, {652, 1.0}, {655, 1.0}, {657, 1.0}, {658, 1.0}, {661, 1.0}, {663, 1.0}, {671, 1.0}, {675, 1.0}, {676, 1.0}, {677, 0.5}, {678, 1.0}, {680, 1.0}, {681, 1.0}, {682, 1.0}, {683, 1.0}, {687, 1.0}, {690, 1.0}, {693, 1.0}, {695, 1.0}, {703, 0.5}, {709, 1.0}, {710, 1.0}, {713, 1.0}, {716, 0.2}, {717, 0.2}, {719, 0.2}, {720, 1.0}, {721, 0.1}, {722, 0.1}, {723, 0.1}, {724, 1.0}, {725, 1.0}, {726, 1.0}, {727, 1.0}, {728, 0.5}, {729, 1.0}}, -- greedTreasure
{{12, 0.2}, {14, 1.0}, {15, 1.0}, {16, 1.0}, {22, 1.0}, {23, 1.0}, {24, 1.0}, {25, 1.0}, {26, 1.0}, {27, 1.0}, {28, 1.0}, {29, 1.0}, {30, 1.0}, {31, 1.0}, {32, 1.0}, {70, 1.0}, {71, 1.0}, {73, 1.0}, {101, 0.5}, {120, 1.0}, {121, 1.0}, {132, 1.0}, {143, 1.0}, {176, 1.0}, {183, 1.0}, {193, 1.0}, {194, 1.0}, {195, 1.0}, {196, 1.0}, {197, 1.0}, {198, 1.0}, {199, 1.0}, {207, 1.0}, {240, 1.0}, {253, 1.0}, {254, 1.0}, {255, 1.0}, {314, 1.0}, {339, 1.0}, {340, 1.0}, {341, 1.0}, {342, 1.0}, {343, 1.0}, {344, 1.0}, {345, 1.0}, {346, 1.0}, {354, 1.0}, {355, 1.0}, {370, 1.0}, {428, 0.5}, {438, 1.0}, {455, 1.0}, {456, 1.0}, {538, 1.0}, {541, 1.0}, {547, 1.0}, {564, 1.0}, {600, 1.0}, {624, 1.0}, {644, 1.0}, {659, 1.0}, {707, 1.0}, {708, 1.0}, {730, 1.0}, {731, 1.0}}, -- greedBoss
{{11, 0.1}, {46, 1.0}, {63, 1.0}, {73, 1.0}, {75, 1.0}, {76, 1.0}, {84, 1.0}, {91, 1.0}, {105, 1.0}, {116, 1.0}, {139, 1.0}, {156, 1.0}, {166, 1.0}, {204, 1.0}, {208, 1.0}, {246, 1.0}, {247, 1.0}, {248, 1.0}, {251, 1.0}, {252, 1.0}, {260, 1.0}, {283, 1.0}, {284, 1.0}, {285, 1.0}, {286, 0.5}, {289, 1.0}, {297, 1.0}, {348, 1.0}, {356, 1.0}, {372, 1.0}, {380, 1.0}, {386, 1.0}, {402, 0.5}, {403, 1.0}, {405, 1.0}, {406, 1.0}, {416, 1.0}, {434, 1.0}, {439, 1.0}, {451, 1.0}, {472, 1.0}, {475, 0.2}, {476, 1.0}, {477, 1.0}, {478, 1.0}, {481, 1.0}, {482, 1.0}, {483, 0.5}, {485, 1.0}, {486, 1.0}, {487, 1.0}, {488, 1.0}, {489, 0.5}, {500, 1.0}, {505, 1.0}, {512, 1.0}, {515, 1.0}, {516, 1.0}, {518, 1.0}, {527, 1.0}, {534, 1.0}, {535, 1.0}, {566, 1.0}, {585, 1.0}, {603, 1.0}, {604, 1.0}, {619, 1.0}, {621, 1.0}, {623, 1.0}, {624, 1.0}, {636, 0.1}, {638, 1.0}, {647, 1.0}, {667, 0.1}, {674, 0.1}, {688, 0.1}, {689, 0.1}, {691, 0.1}, {692, 1.0}, {700, 0.1}, {701, 0.1}, {703, 0.1}, {711, 0.1}, {721, 0.1}, {722, 0.1}, {723, 0.1}, {732, 1.0}}, -- greedShop
{{51, 1.0}, {73, 1.0}, {79, 1.0}, {80, 1.0}, {81, 1.0}, {126, 1.0}, {133, 1.0}, {134, 1.0}, {145, 1.0}, {212, 1.0}, {216, 1.0}, {225, 1.0}, {260, 1.0}, {371, 1.0}, {408, 1.0}, {442, 1.0}, {451, 1.0}, {468, 1.0}, {475, 0.2}, {496, 1.0}, {503, 1.0}, {536, 1.0}, {565, 1.0}, {569, 1.0}, {642, 1.0}, {654, 0.5}, {692, 1.0}, {694, 0.5}, {702, 1.0}, {711, 1.0}}, -- greedCurse
{{34, 1.0}, {35, 1.0}, {51, 1.0}, {67, 1.0}, {68, 0.2}, {74, 1.0}, {79, 1.0}, {80, 1.0}, {81, 1.0}, {82, 1.0}, {83, 1.0}, {97, 1.0}, {109, 1.0}, {113, 1.0}, {114, 1.0}, {118, 1.0}, {122, 1.0}, {123, 1.0}, {132, 1.0}, {133, 1.0}, {134, 1.0}, {145, 1.0}, {157, 1.0}, {159, 1.0}, {172, 1.0}, {187, 1.0}, {212, 1.0}, {216, 1.0}, {225, 1.0}, {230, 1.0}, {237, 1.0}, {259, 1.0}, {268, 1.0}, {269, 1.0}, {270, 1.0}, {292, 1.0}, {311, 1.0}, {360, 1.0}, {391, 1.0}, {399, 1.0}, {408, 1.0}, {409, 1.0}, {411, 1.0}, {412, 1.0}, {420, 1.0}, {431, 1.0}, {433, 1.0}, {441, 0.2}, {442, 1.0}, {451, 1.0}, {462, 1.0}, {468, 1.0}, {503, 1.0}, {519, 1.0}, {526, 1.0}, {536, 1.0}, {545, 1.0}, {554, 1.0}, {556, 1.0}, {569, 1.0}, {572, 1.0}, {577, 1.0}, {606, 1.0}, {634, 1.0}, {646, 1.0}, {654, 1.0}, {665, 1.0}, {679, 1.0}, {684, 1.0}, {692, 1.0}, {694, 0.5}, {695, 1.0}, {698, 1.0}, {699, 1.0}, {702, 1.0}, {704, 0.5}, {705, 0.5}, {706, 0.5}, {712, 0.5}, {728, 1.0}}, -- greedDevil
{{7, 1.0}, {72, 1.0}, {78, 1.0}, {112, 1.0}, {138, 1.0}, {162, 1.0}, {178, 1.0}, {182, 1.0}, {184, 1.0}, {185, 1.0}, {197, 1.0}, {243, 1.0}, {313, 1.0}, {331, 1.0}, {333, 1.0}, {334, 1.0}, {335, 1.0}, {363, 1.0}, {387, 1.0}, {390, 1.0}, {400, 1.0}, {407, 1.0}, {413, 1.0}, {415, 1.0}, {423, 1.0}, {464, 1.0}, {490, 1.0}, {499, 1.0}, {526, 1.0}, {528, 1.0}, {533, 1.0}, {543, 1.0}, {567, 1.0}, {568, 1.0}, {573, 1.0}, {574, 1.0}, {579, 1.0}, {584, 0.5}, {586, 1.0}, {601, 1.0}, {622, 1.0}, {634, 1.0}, {640, 1.0}, {643, 1.0}, {651, 1.0}, {653, 1.0}, {685, 1.0}, {686, 1.0}, {691, 0.5}, {696, 1.0}}, -- greedAngel
{{11, 1.0}, {16, 1.0}, {17, 1.0}, {20, 1.0}, {35, 1.0}, {84, 1.0}, {120, 1.0}, {121, 1.0}, {127, 1.0}, {168, 1.0}, {190, 1.0}, {213, 1.0}, {226, 1.0}, {242, 1.0}, {258, 1.0}, {262, 1.0}, {263, 1.0}, {271, 1.0}, {286, 1.0}, {316, 1.0}, {321, 1.0}, {348, 1.0}, {389, 1.0}, {402, 1.0}, {405, 1.0}, {424, 1.0}, {450, 1.0}, {489, 1.0}, {500, 1.0}, {501, 1.0}, {546, 1.0}, {562, 1.0}, {571, 1.0}, {582, 1.0}, {609, 1.0}, {612, 1.0}, {625, 1.0}, {628, 1.0}, {632, 1.0}, {636, 1.0}, {664, 1.0}, {667, 1.0}, {669, 1.0}, {674, 1.0}, {677, 1.0}, {688, 1.0}, {689, 1.0}, {691, 0.5}, {700, 1.0}, {701, 1.0}, {703, 1.0}, {711, 1.0}, {716, 1.0}, {717, 1.0}, {719, 1.0}, {721, 1.0}, {723, 1.0}}, -- greedSecret
{{1, 1.0}, {3, 1.0}, {4, 1.0}, {5, 1.0}, {21, 1.0}, {32, 1.0}, {38, 1.0}, {44, 1.0}, {46, 1.0}, {47, 1.0}, {48, 1.0}, {49, 1.0}, {51, 1.0}, {63, 1.0}, {66, 1.0}, {68, 1.0}, {77, 1.0}, {85, 1.0}, {89, 1.0}, {90, 1.0}, {91, 1.0}, {93, 1.0}, {95, 1.0}, {102, 1.0}, {105, 1.0}, {116, 1.0}, {136, 1.0}, {137, 1.0}, {147, 1.0}, {152, 1.0}, {153, 1.0}, {166, 1.0}, {189, 1.0}, {194, 1.0}, {196, 1.0}, {208, 1.0}, {212, 1.0}, {227, 1.0}, {232, 1.0}, {244, 1.0}, {251, 1.0}, {255, 1.0}, {263, 1.0}, {267, 1.0}, {283, 1.0}, {284, 1.0}, {285, 1.0}, {337, 1.0}, {338, 1.0}, {352, 1.0}, {357, 1.0}, {362, 1.0}, {370, 1.0}, {382, 1.0}, {383, 1.0}, {386, 1.0}, {395, 1.0}, {397, 1.0}, {403, 1.0}, {406, 1.0}, {419, 1.0}, {422, 1.0}, {425, 1.0}, {427, 1.0}, {437, 1.0}, {438, 1.0}, {439, 1.0}, {444, 1.0}, {451, 1.0}, {465, 1.0}, {476, 1.0}, {478, 1.0}, {488, 1.0}, {494, 1.0}, {505, 1.0}, {515, 1.0}, {516, 1.0}, {518, 1.0}, {524, 1.0}, {527, 1.0}, {538, 1.0}, {599, 1.0}, {604, 1.0}, {609, 1.0}, {617, 1.0}, {624, 1.0}, {629, 1.0}, {638, 1.0}, {644, 1.0}, {649, 1.0}, {655, 1.0}, {687, 1.0}, {709, 1.0}, {720, 1.0}, {723, 1.0}, {730, 1.0}}, -- craneGame
{{12, 1.0}, {13, 1.0}, {15, 1.0}, {30, 1.0}, {31, 1.0}, {40, 1.0}, {45, 1.0}, {49, 1.0}, {51, 1.0}, {53, 1.0}, {67, 1.0}, {72, 1.0}, {73, 1.0}, {79, 1.0}, {80, 1.0}, {82, 1.0}, {96, 1.0}, {105, 1.0}, {109, 1.0}, {110, 1.0}, {118, 1.0}, {119, 1.0}, {122, 1.0}, {135, 1.0}, {137, 1.0}, {157, 1.0}, {159, 1.0}, {166, 1.0}, {167, 1.0}, {176, 1.0}, {177, 1.0}, {182, 1.0}, {193, 1.0}, {208, 1.0}, {214, 1.0}, {230, 1.0}, {247, 1.0}, {253, 1.0}, {254, 1.0}, {261, 1.0}, {276, 1.0}, {289, 1.0}, {334, 1.0}, {373, 1.0}, {394, 1.0}, {399, 1.0}, {411, 1.0}, {412, 1.0}, {421, 1.0}, {435, 1.0}, {443, 1.0}, {452, 1.0}, {462, 1.0}, {466, 1.0}, {475, 1.0}, {481, 1.0}, {506, 1.0}, {511, 1.0}, {531, 1.0}, {541, 1.0}, {554, 1.0}, {556, 1.0}, {565, 1.0}, {572, 1.0}, {573, 1.0}, {580, 1.0}, {606, 1.0}, {607, 1.0}, {614, 1.0}, {616, 1.0}, {618, 1.0}, {621, 1.0}, {637, 1.0}, {650, 1.0}, {654, 1.0}, {657, 1.0}, {671, 1.0}, {682, 1.0}, {684, 1.0}, {692, 1.0}, {694, 1.0}, {695, 1.0}, {700, 1.0}, {702, 1.0}, {703, 1.0}, {704, 1.0}, {705, 1.0}, {706, 1.0}, {711, 1.0}, {724, 1.0}, {726, 1.0}, {728, 1.0}}, -- ultraSecret
{{37, 1.0}, {106, 1.0}, {125, 1.0}, {137, 1.0}, {140, 1.0}, {190, 0.2}, {209, 1.0}, {220, 1.0}, {256, 1.0}, {353, 1.0}, {366, 1.0}, {367, 1.0}, {432, 1.0}, {483, 1.0}, {517, 1.0}, {563, 1.0}, {583, 1.0}, {614, 1.0}, {646, 0.2}, {727, 1.0}}, -- bombBum
{{588, 1.0}, {589, 1.0}, {590, 1.0}, {591, 1.0}, {592, 1.0}, {593, 1.0}, {594, 1.0}, {595, 1.0}, {596, 1.0}, {597, 1.0}, {598, 1.0}}, -- planetarium
{{29, 1.0}, {30, 1.0}, {31, 1.0}, {39, 1.0}, {41, 1.0}, {55, 1.0}, {102, 1.0}, {110, 1.0}, {114, 0.2}, {139, 1.0}, {175, 1.0}, {195, 1.0}, {199, 1.0}, {200, 1.0}, {217, 1.0}, {228, 1.0}, {341, 1.0}, {355, 1.0}, {439, 1.0}, {455, 1.0}, {508, 1.0}, {546, 0.2}, {547, 1.0}, {604, 1.0}}, -- oldChest
{{8, 1.0}, {10, 1.0}, {57, 1.0}, {67, 1.0}, {73, 1.0}, {88, 1.0}, {95, 1.0}, {96, 1.0}, {99, 1.0}, {100, 1.0}, {112, 1.0}, {113, 1.0}, {117, 1.0}, {128, 1.0}, {144, 1.0}, {155, 1.0}, {163, 1.0}, {167, 1.0}, {170, 1.0}, {172, 1.0}, {174, 1.0}, {188, 1.0}, {207, 1.0}, {264, 1.0}, {265, 1.0}, {266, 1.0}, {267, 1.0}, {268, 1.0}, {269, 1.0}, {270, 1.0}, {272, 1.0}, {273, 1.0}, {274, 1.0}, {275, 1.0}, {277, 1.0}, {278, 1.0}, {279, 1.0}, {280, 1.0}, {281, 1.0}, {320, 1.0}, {322, 1.0}, {360, 1.0}, {361, 1.0}, {363, 1.0}, {364, 1.0}, {365, 1.0}, {372, 1.0}, {384, 1.0}, {385, 1.0}, {388, 1.0}, {390, 1.0}, {403, 1.0}, {404, 1.0}, {417, 1.0}, {426, 1.0}, {430, 1.0}, {435, 1.0}, {468, 1.0}, {470, 1.0}, {471, 1.0}, {472, 1.0}, {473, 1.0}, {491, 1.0}, {492, 1.0}, {509, 1.0}, {511, 1.0}, {518, 1.0}, {519, 1.0}, {537, 1.0}, {575, 1.0}, {581, 1.0}, {607, 1.0}, {608, 1.0}, {610, 1.0}, {612, 1.0}, {615, 1.0}, {629, 1.0}, {635, 1.0}, {645, 1.0}, {649, 1.0}, {661, 1.0}, {679, 1.0}, {682, 1.0}, {698, 1.0}}, -- babyShop
{{7, 1.0}, {27, 1.0}, {60, 1.0}, {138, 1.0}, {183, 1.0}, {349, 1.0}, {362, 1.0}, {439, 1.0}, {488, 1.0}, {527, 1.0}, {719, 1.0}}, -- woodenChest
{{26, 1.0}, {42, 1.0}, {140, 1.0}, {268, 1.0}, {273, 1.0}, {336, 0.5}, {480, 1.0}, {618, 0.5}, {639, 1.0}}, -- rottenBeggar
}
--The pools that each item is in, for roughly checking if a given item is unlocked
EID.XMLItemIsInPools = {[1] = {0, 16, 23}, [2] = {0, 16}, [3] = {0, 16, 23}, [4] = {0, 16, 23}, [5] = {0, 16, 23}, [6] = {0, 16}, [7] = {0, 4, 16, 21, 29}, [8] = {0, 3, 16, 28}, [9] = {7}, [10] = {0, 13, 16, 28}, [11] = {5, 18, 22}, [12] = {0, 16, 17, 24}, [13] = {0, 11, 16, 24}, [14] = {0, 2, 11, 17}, [15] = {0, 17, 24}, [16] = {5, 17, 22}, [17] = {0, 5, 22}, [18] = {}, [19] = {0}, [20] = {5, 22}, [21] = {1, 10, 23}, [22] = {2, 10, 17}, [23] = {2, 10, 17}, [24] = {2, 10, 17}, [25] = {2, 10, 17}, [26] = {2, 10, 17, 30}, [27] = {2, 17, 29}, [28] = {2, 8, 17}, [29] = {2, 8, 15, 17, 27}, [30] = {2, 15, 17, 24, 27}, [31] = {2, 15, 17, 24, 27}, [32] = {2, 8, 17, 23}, [33] = {1, 4, 6}, [34] = {3, 6, 16, 20}, [35] = {3, 5, 6, 16, 20, 22}, [36] = {0, 7}, [37] = {0, 16, 25}, [38] = {0, 16, 23}, [39] = {0, 15, 27}, [40] = {0, 24}, [41] = {0, 15, 27}, [42] = {0, 16, 30}, [44] = {0, 23}, [45] = {0, 16, 24}, [46] = {0, 10, 18, 23}, [47] = {0, 16, 23}, [48] = {0, 16, 23}, [49] = {0, 23, 24}, [50] = {16}, [51] = {2, 3, 11, 12, 19, 20, 23, 24}, [52] = {0, 16}, [53] = {0, 24}, [54] = {1, 10}, [55] = {0, 15, 16, 27}, [56] = {0, 16}, [57] = {0, 13, 16, 28}, [58] = {0, 6}, [59] = {}, [60] = {1, 29}, [62] = {0, 16}, [63] = {1, 14, 18, 23}, [64] = {1, 16}, [65] = {0, 6, 16}, [66] = {0, 23}, [67] = {0, 3, 16, 20, 24, 28}, [68] = {0, 16, 20, 23}, [69] = {0, 16}, [70] = {2, 11, 17}, [71] = {0, 17}, [72] = {0, 4, 21, 24}, [73] = {17, 18, 19, 24, 28}, [74] = {3, 8, 20}, [75] = {0, 1, 18}, [76] = {0, 18}, [77] = {0, 16, 23}, [78] = {0, 6, 16, 21}, [79] = {3, 11, 12, 19, 20, 24}, [80] = {3, 11, 12, 19, 20, 24}, [81] = {3, 9, 12, 19, 20}, [82] = {3, 11, 20, 24}, [83] = {3, 11, 20}, [84] = {3, 5, 18, 22}, [85] = {0, 1, 16, 23}, [86] = {0}, [87] = {0, 11, 16}, [88] = {0, 16, 28}, [89] = {0, 16, 23}, [90] = {23}, [91] = {0, 18, 23}, [92] = {0, 2}, [93] = {0, 16, 23}, [94] = {0, 16}, [95] = {0, 16, 23, 28}, [96] = {0, 16, 24, 28}, [97] = {0, 3, 6, 16, 20}, [98] = {0, 4, 16}, [99] = {0, 16, 28}, [100] = {0, 16, 28}, [101] = {0, 4, 16, 17}, [102] = {0, 1, 10, 11, 15, 16, 23, 27}, [103] = {0, 16}, [104] = {0, 16}, [105] = {0, 18, 23, 24}, [106] = {0, 16, 25}, [107] = {0, 16}, [108] = {0, 4, 16}, [109] = {0, 3, 20, 24}, [110] = {0, 15, 16, 24, 27}, [111] = {0, 10, 16}, [112] = {4, 21, 28}, [113] = {0, 3, 20, 28}, [114] = {0, 3, 15, 16, 20, 27}, [115] = {0, 3, 16}, [116] = {1, 14, 18, 23}, [117] = {0, 16, 28}, [118] = {3, 20, 24}, [119] = {24}, [120] = {0, 5, 16, 17, 22}, [121] = {0, 5, 16, 17, 22}, [122] = {3, 11, 20, 24}, [123] = {0, 3, 6, 20}, [124] = {0, 4, 16}, [125] = {0, 16, 25}, [126] = {0, 11, 12, 16, 19}, [127] = {0, 3, 5, 11, 22}, [128] = {0, 13, 16, 28}, [129] = {0}, [130] = {}, [131] = {0, 16}, [132] = {16, 17, 20}, [133] = {3, 9, 12, 19, 20}, [134] = {3, 9, 12, 19, 20}, [135] = {24}, [136] = {0, 23}, [137] = {0, 1, 16, 23, 24, 25}, [138] = {0, 16, 21, 29}, [139] = {1, 15, 18, 27}, [140] = {0, 9, 16, 25, 30}, [141] = {2}, [142] = {0, 4, 16}, [143] = {0, 2, 11, 17}, [144] = {0, 10, 28}, [145] = {3, 9, 12, 19, 20}, [146] = {0, 4, 16}, [147] = {1, 23}, [148] = {0, 16}, [149] = {0, 16}, [150] = {0, 16}, [151] = {0, 16}, [152] = {0, 16, 23}, [153] = {0, 16, 23}, [154] = {0, 16}, [155] = {0, 16, 28}, [156] = {1, 4, 18}, [157] = {0, 3, 16, 20, 24}, [158] = {}, [159] = {3, 11, 20, 24}, [160] = {0}, [161] = {0, 16}, [162] = {0, 4, 16, 21}, [163] = {0, 3, 16, 28}, [164] = {1}, [165] = {2}, [166] = {0, 18, 23, 24}, [167] = {0, 16, 24, 28}, [168] = {5, 22}, [169] = {0, 16}, [170] = {0, 16, 28}, [171] = {0}, [172] = {0, 3, 16, 20, 28}, [173] = {0, 4}, [174] = {0, 16, 28}, [175] = {0, 13, 16, 27}, [176] = {0, 2, 17, 24}, [177] = {1, 10, 24}, [178] = {0, 4, 21}, [179] = {8}, [180] = {0, 10}, [181] = {}, [182] = {4, 21, 24}, [183] = {2, 17, 29}, [184] = {4, 21}, [185] = {4, 21}, [186] = {0, 3, 16}, [187] = {3, 20}, [188] = {0, 16, 28}, [189] = {0, 16, 23}, [190] = {0, 5, 22, 25}, [191] = {0, 16}, [192] = {0, 6, 16}, [193] = {2, 17, 24}, [194] = {2, 8, 17, 23}, [195] = {1, 2, 10, 11, 15, 17, 27}, [196] = {2, 8, 17, 23}, [197] = {2, 17, 21}, [198] = {2, 10, 17}, [199] = {1, 13, 15, 17, 27}, [200] = {0, 15, 16, 27}, [201] = {0, 16}, [202] = {0}, [203] = {1}, [204] = {1, 10, 18}, [205] = {1, 14}, [206] = {0, 16}, [207] = {17, 28}, [208] = {1, 18, 23, 24}, [209] = {0, 7, 16, 25}, [210] = {0, 16}, [211] = {0}, [212] = {3, 9, 12, 19, 20, 23}, [213] = {0, 5, 16, 22}, [214] = {0, 16, 24}, [215] = {3, 12}, [216] = {3, 11, 12, 19, 20}, [217] = {0, 15, 16, 27}, [218] = {2}, [219] = {2}, [220] = {0, 16, 25}, [221] = {0, 16}, [222] = {0, 16}, [223] = {0, 16}, [224] = {0, 16}, [225] = {0, 3, 11, 12, 19, 20}, [226] = {5, 16, 22}, [227] = {0, 1, 23}, [228] = {0, 15, 16, 27}, [229] = {0, 16}, [230] = {3, 11, 20, 24}, [231] = {0, 16}, [232] = {1, 23}, [233] = {0, 16}, [234] = {0, 16}, [236] = {0, 16}, [237] = {0, 3, 16, 20}, [238] = {}, [239] = {}, [240] = {0, 2, 11, 17}, [241] = {3, 11, 12}, [242] = {0, 5, 16, 22}, [243] = {4, 21}, [244] = {0, 16, 23}, [245] = {0, 16}, [246] = {1, 10, 18}, [247] = {1, 18, 24}, [248] = {1, 18}, [249] = {1}, [250] = {1}, [251] = {1, 18, 23}, [252] = {1, 18}, [253] = {2, 17, 24}, [254] = {2, 16, 17, 24}, [255] = {2, 8, 17, 23}, [256] = {0, 16, 25}, [257] = {0, 16}, [258] = {5, 16, 22}, [259] = {3, 11, 20}, [260] = {1, 12, 18, 19}, [261] = {0, 16, 24}, [262] = {3, 5, 11, 22}, [263] = {5, 22, 23}, [264] = {0, 13, 16, 28}, [265] = {0, 16, 28}, [266] = {0, 16, 28}, [267] = {0, 16, 23, 28}, [268] = {0, 3, 16, 20, 28, 30}, [269] = {0, 3, 16, 20, 28}, [270] = {0, 20, 28}, [271] = {0, 5, 10, 16, 22}, [272] = {0, 13, 28}, [273] = {0, 16, 28, 30}, [274] = {0, 16, 28}, [275] = {0, 3, 28}, [276] = {0, 24}, [277] = {0, 16, 28}, [278] = {0, 3, 11, 28}, [279] = {0, 13, 16, 28}, [280] = {0, 16, 28}, [281] = {0, 16, 28}, [282] = {0, 6}, [283] = {0, 18, 23}, [284] = {0, 18, 23}, [285] = {0, 18, 23}, [286] = {1, 5, 18, 22}, [287] = {0, 5, 6}, [288] = {0, 16}, [289] = {1, 18, 24}, [290] = {1}, [291] = {0, 16}, [292] = {0, 3, 6, 20}, [293] = {}, [294] = {0, 10}, [295] = {0, 1}, [296] = {1}, [297] = {1, 9, 18}, [298] = {0}, [299] = {0, 16}, [300] = {0, 16}, [301] = {0, 16}, [302] = {0, 16}, [303] = {0, 16}, [304] = {0}, [305] = {0, 16}, [306] = {0, 16}, [307] = {0, 16}, [308] = {0, 16}, [309] = {0, 16}, [310] = {0, 16}, [311] = {3, 20}, [312] = {0, 16}, [313] = {0, 4, 21}, [314] = {0, 17}, [315] = {0, 16}, [316] = {0, 5, 9, 16, 22}, [317] = {0, 16}, [318] = {0, 16}, [319] = {0, 16}, [320] = {0, 13, 16, 28}, [321] = {0, 5, 16, 22}, [322] = {0, 16, 28}, [323] = {0}, [324] = {0}, [325] = {0, 16}, [326] = {4}, [327] = {}, [328] = {}, [329] = {0, 16}, [330] = {0, 16}, [331] = {4, 21}, [332] = {0, 4, 16}, [333] = {0, 4, 16, 21}, [334] = {0, 4, 16, 21, 24}, [335] = {0, 4, 16, 21}, [336] = {0, 16, 30}, [337] = {1, 23}, [338] = {1, 23}, [339] = {2, 17}, [340] = {2, 11, 17}, [341] = {2, 8, 17, 27}, [342] = {2, 17}, [343] = {2, 8, 13, 17}, [344] = {2, 8, 17}, [345] = {2, 11, 17}, [346] = {2, 17}, [347] = {1}, [348] = {1, 5, 18, 22}, [349] = {1, 16, 29}, [350] = {0}, [351] = {0, 16}, [352] = {0, 16, 23}, [353] = {0, 16, 25}, [354] = {2, 8, 17}, [355] = {2, 8, 15, 17, 27}, [356] = {1, 14, 18}, [357] = {1, 16, 23}, [358] = {0, 16}, [359] = {0, 16}, [360] = {3, 20, 28}, [361] = {0, 28}, [362] = {0, 10, 16, 23, 29}, [363] = {4, 21, 28}, [364] = {0, 13, 16, 28}, [365] = {0, 13, 16, 28}, [366] = {0, 16, 25}, [367] = {0, 16, 25}, [368] = {0, 16}, [369] = {0, 16}, [370] = {2, 8, 17, 23}, [371] = {0, 9, 12, 16, 19}, [372] = {1, 14, 18, 28}, [373] = {0, 16, 24}, [374] = {0, 4, 16}, [375] = {0, 16}, [376] = {1, 10}, [377] = {0, 16}, [378] = {0, 7, 16}, [379] = {0, 16}, [380] = {1, 16, 18}, [381] = {0}, [382] = {0, 16, 23}, [383] = {1, 16, 23}, [384] = {0, 16, 28}, [385] = {0, 10, 28}, [386] = {0, 18, 23}, [387] = {4, 21}, [388] = {0, 5, 13, 28}, [389] = {0, 5, 16, 22}, [390] = {0, 4, 21, 28}, [391] = {0, 3, 16, 20}, [392] = {0, 16}, [393] = {0, 16}, [394] = {0, 16, 24}, [395] = {0, 16, 23}, [396] = {1}, [397] = {0, 16, 23}, [398] = {0, 16}, [399] = {3, 20, 24}, [400] = {4, 21}, [401] = {0, 16}, [402] = {1, 5, 18, 22}, [403] = {1, 18, 23, 28}, [404] = {0, 28}, [405] = {0, 5, 18, 22}, [406] = {0, 18, 23}, [407] = {0, 16, 21}, [408] = {3, 12, 19, 20}, [409] = {3, 11, 20}, [410] = {0, 16}, [411] = {0, 3, 16, 20, 24}, [412] = {3, 20, 24}, [413] = {4, 21}, [414] = {1}, [415] = {4, 21}, [416] = {1, 16, 18}, [417] = {3, 28}, [418] = {0}, [419] = {0, 23}, [420] = {3, 11, 20}, [421] = {0, 16, 24}, [422] = {0, 1, 23}, [423] = {4, 21}, [424] = {1, 5, 22}, [425] = {1, 16, 23}, [426] = {0, 13, 16, 28}, [427] = {0, 23}, [428] = {2, 8, 17}, [429] = {}, [430] = {0, 13, 16, 28}, [431] = {0, 3, 16, 20}, [432] = {0, 16, 25}, [433] = {3, 20}, [434] = {1, 16, 18}, [435] = {0, 24, 28}, [436] = {0, 16}, [437] = {0, 23}, [438] = {2, 8, 17, 23}, [439] = {1, 15, 18, 23, 27, 29}, [440] = {0, 16}, [441] = {3, 20}, [442] = {3, 12, 19, 20}, [443] = {0, 16, 24}, [444] = {0, 8, 16, 23}, [445] = {0, 16}, [446] = {0, 16}, [447] = {0, 10, 16}, [448] = {0, 16}, [449] = {0, 16}, [450] = {5, 16, 22}, [451] = {1, 12, 18, 19, 20, 23}, [452] = {0, 16, 24}, [453] = {0, 16}, [454] = {0, 16}, [455] = {2, 8, 10, 17, 27}, [456] = {2, 8, 10, 17}, [457] = {0, 16}, [458] = {0, 16}, [459] = {0, 16}, [460] = {0, 16}, [461] = {0, 16}, [462] = {3, 20, 24}, [463] = {0, 16}, [464] = {4, 21}, [465] = {0, 16, 23}, [466] = {0, 16, 24}, [467] = {0, 16}, [468] = {3, 12, 19, 20, 28}, [469] = {0, 16}, [470] = {0, 16, 28}, [471] = {0, 16, 28}, [472] = {1, 18, 28}, [473] = {0, 16, 28}, [474] = {}, [475] = {1, 3, 9, 11, 12, 18, 19, 24}, [476] = {0, 18, 23}, [477] = {3, 4, 18}, [478] = {0, 18, 23}, [479] = {1}, [480] = {1, 30}, [481] = {0, 18, 24}, [482] = {0, 18}, [483] = {1, 18, 25}, [484] = {}, [485] = {0, 1, 10, 18}, [486] = {1, 18}, [487] = {1, 11, 18}, [488] = {0, 18, 23, 29}, [489] = {5, 18, 22}, [490] = {4, 21}, [491] = {0, 28}, [492] = {0, 13, 28}, [493] = {0, 11, 16}, [494] = {0, 14, 16, 23}, [495] = {0, 16}, [496] = {0, 11, 12, 16, 19}, [497] = {0, 16}, [498] = {3, 4}, [499] = {4, 21}, [500] = {5, 18, 22}, [501] = {5, 22}, [502] = {0, 16}, [503] = {3, 11, 12, 16, 19, 20}, [504] = {0, 7, 16}, [505] = {1, 18, 23}, [506] = {0, 16, 24}, [507] = {0, 16}, [508] = {0, 15, 16, 27}, [509] = {0, 16, 28}, [510] = {4}, [511] = {0, 16, 24, 28}, [512] = {0, 16, 18}, [513] = {0, 16}, [514] = {1, 16}, [515] = {1, 16, 18, 23}, [516] = {0, 16, 18, 23}, [517] = {0, 16, 25}, [518] = {1, 16, 18, 23, 28}, [519] = {3, 4, 20, 28}, [520] = {1, 14, 16}, [521] = {1}, [522] = {0, 16}, [523] = {1}, [524] = {0, 16, 23}, [525] = {0, 16}, [526] = {3, 4, 20, 21}, [527] = {1, 13, 18, 23, 29}, [528] = {4, 21}, [529] = {0, 16}, [530] = {3}, [531] = {0, 16, 24}, [532] = {0, 16}, [533] = {4, 21}, [534] = {1, 8, 18}, [535] = {1, 18}, [536] = {3, 12, 19, 20}, [537] = {0, 16, 28}, [538] = {2, 17, 23}, [539] = {0, 16}, [540] = {0, 16}, [541] = {2, 17, 24}, [542] = {0, 16}, [543] = {0, 4, 16, 21}, [544] = {0, 16}, [545] = {0, 3, 6, 16, 20}, [546] = {5, 22, 27}, [547] = {2, 17, 27}, [548] = {0, 16}, [549] = {0, 16}, [550] = {}, [551] = {}, [552] = {}, [553] = {0, 16}, [554] = {3, 20, 24}, [555] = {0, 16}, [556] = {3, 20, 24}, [557] = {0, 16}, [558] = {0, 16}, [559] = {0, 14, 16}, [560] = {0, 16}, [561] = {0, 16}, [562] = {5, 22}, [563] = {0, 16, 25}, [564] = {2, 17}, [565] = {0, 9, 12, 16, 19, 24}, [566] = {1, 18}, [567] = {4, 21}, [568] = {4, 21}, [569] = {3, 12, 19, 20}, [570] = {0, 16}, [571] = {5, 8, 22}, [572] = {3, 20, 24}, [573] = {4, 21, 24}, [574] = {4, 21}, [575] = {0, 16, 28}, [576] = {0, 7, 16}, [577] = {3, 20}, [578] = {0, 16}, [579] = {4, 21}, [580] = {5, 9, 12, 13, 15, 24}, [581] = {0, 13, 16, 28}, [582] = {5, 22}, [583] = {0, 16, 25}, [584] = {4, 6, 21}, [585] = {1, 18}, [586] = {4, 21}, [588] = {26}, [589] = {26}, [590] = {26}, [591] = {26}, [592] = {26}, [593] = {26}, [594] = {26}, [595] = {26}, [596] = {26}, [597] = {26}, [598] = {26}, [599] = {1, 23}, [600] = {2, 17}, [601] = {4, 21}, [602] = {1}, [603] = {1, 14, 18}, [604] = {1, 18, 23, 27}, [605] = {0, 16}, [606] = {3, 20, 24}, [607] = {0, 16, 24, 28}, [608] = {0, 16, 28}, [609] = {0, 5, 16, 22, 23}, [610] = {0, 16, 28}, [611] = {0, 16}, [612] = {0, 5, 16, 22, 28}, [614] = {0, 16, 24, 25}, [615] = {0, 16, 28}, [616] = {0, 16, 24}, [617] = {0, 16, 23}, [618] = {0, 16, 24, 30}, [619] = {1, 18}, [621] = {1, 18, 24}, [622] = {4, 21}, [623] = {1, 18}, [624] = {1, 2, 17, 18, 23}, [625] = {0, 5, 16, 22}, [626] = {}, [627] = {}, [628] = {5, 22}, [629] = {0, 13, 16, 23, 28}, [631] = {0, 16}, [632] = {5, 22}, [633] = {}, [634] = {3, 4, 20, 21}, [635] = {0, 16, 28}, [636] = {5, 18, 22}, [637] = {0, 16, 24}, [638] = {1, 18, 23}, [639] = {0, 16, 30}, [640] = {4, 21}, [641] = {0, 16}, [642] = {1, 9, 12, 19}, [643] = {4, 21}, [644] = {2, 8, 17, 23}, [645] = {0, 16, 28}, [646] = {3, 20, 25}, [647] = {1, 14, 18}, [649] = {0, 13, 16, 23, 28}, [650] = {0, 16, 24}, [651] = {4, 21}, [652] = {0, 16}, [653] = {4, 21}, [654] = {3, 9, 12, 19, 20, 24}, [655] = {0, 16, 23}, [656] = {}, [657] = {0, 16, 24}, [658] = {0, 16}, [659] = {2, 17}, [660] = {1}, [661] = {0, 16, 28}, [663] = {0, 16}, [664] = {5, 22}, [665] = {3, 9, 20}, [667] = {5, 18, 22}, [668] = {}, [669] = {5, 22}, [670] = {1}, [671] = {0, 16, 24}, [672] = {3, 11}, [673] = {}, [674] = {5, 18, 22}, [675] = {0, 5, 16}, [676] = {0, 11, 16}, [677] = {0, 5, 16, 22}, [678] = {0, 16}, [679] = {3, 20, 28}, [680] = {0, 16}, [681] = {0, 16}, [682] = {0, 16, 24, 28}, [683] = {0, 16}, [684] = {3, 20, 24}, [685] = {4, 21}, [686] = {4, 21}, [687] = {0, 16, 23}, [688] = {5, 18, 22}, [689] = {5, 18, 22}, [690] = {0, 16}, [691] = {4, 5, 18, 21, 22}, [692] = {3, 12, 18, 19, 20, 24}, [693] = {0, 13, 16}, [694] = {3, 12, 19, 20, 24}, [695] = {0, 3, 16, 20, 24}, [696] = {4, 21}, [697] = {5, 12}, [698] = {3, 20, 28}, [699] = {3, 20}, [700] = {5, 18, 22, 24}, [701] = {5, 18, 22}, [702] = {3, 12, 19, 20, 24}, [703] = {0, 5, 16, 18, 22, 24}, [704] = {3, 20, 24}, [705] = {3, 20, 24}, [706] = {3, 20, 24}, [707] = {2, 10, 17}, [708] = {2, 8, 17}, [709] = {0, 16, 23}, [710] = {0, 16}, [711] = {5, 12, 18, 19, 22, 24}, [712] = {3, 6, 20}, [713] = {0, 16}, [714] = {}, [715] = {}, [716] = {1, 5, 16, 22}, [717] = {0, 5, 16, 22}, [719] = {1, 5, 16, 22, 29}, [720] = {0, 16, 23}, [721] = {5, 16, 18, 22}, [722] = {0, 16, 18}, [723] = {0, 5, 16, 18, 22, 23}, [724] = {0, 16, 24}, [725] = {0, 16}, [726] = {0, 16, 24}, [727] = {0, 16, 25}, [728] = {0, 3, 16, 20, 24}, [729] = {0, 16}, [730] = {2, 8, 17, 23}, [731] = {2, 17}, [732] = {8, 15, 18}, }

local game = Game()
--
-- Checks if any player has a given collectible ID, for modifiers
function EID:GetMaxCollectibleID()
	local id = CollectibleType.NUM_COLLECTIBLES-1
	local step = 16
	while step > 0 do
		if EID.itemConfig:GetCollectible(id+step) ~= nil then
			id = id + step
		else
			step = step // 2
		end
	end

	return id
end
function EID:isCollectibleUnlocked(collectibleID, itemPoolOfItem)
	local itemPool = game:GetItemPool()
	if maxCollectibleID == nil then maxCollectibleID = EID:GetMaxCollectibleID() end
	for i= 1, maxCollectibleID do
		if ItemConfig.Config.IsValidCollectible(i) and i ~= collectibleID then
			itemPool:AddRoomBlacklist(i)
		end
	end
	local isUnlocked = false
	for i = 0, 1 do -- some samples to make sure
		local collID = itemPool:GetCollectible(itemPoolOfItem, false, 1)
		if collID == collectibleID then
			isUnlocked = true
			break
		end
	end
	itemPool:ResetRoomBlacklist()
	return isUnlocked
end
function EID:PlayersHaveCollectible(collectibleID)
	for i = 0, game:GetNumPlayers() - 1 do
		local player = Isaac.GetPlayer(i)
		if player:HasCollectible(collectibleID) then
			return true, player
		end
	end
	return false
end
function EID:isCollectibleUnlockedAnyPool(collectibleID)
	--THIS FUNCTION IS FOR REPENTANCE ONLY due to using Repentance XML data
	--Currently used by the Achievement Check, Spindown Dice, and Bag of Crafting
	if not REPENTANCE or EID:PlayersHaveCollectible(CollectibleType.COLLECTIBLE_TMTRAINER) then return true end
	local item = EID.itemConfig:GetCollectible(collectibleID)
	if item == nil then return false end
	if EID.itemUnlockStates[collectibleID] == nil then
		--whitelist all quest items and items with no associated achievement
		if item.AchievementID == -1 or (item.Tags and item.Tags & ItemConfig.TAG_QUEST == ItemConfig.TAG_QUEST) then
			EID.itemUnlockStates[collectibleID] = true
			return true
		end
		--blacklist all hidden items
		if item.Hidden then
			EID.itemUnlockStates[collectibleID] = false
			return false
		end
		--iterate through the pools this item can be in
		for _,itemPoolID in ipairs(EID.XMLItemIsInPools[collectibleID]) do
			if (itemPoolID < ItemPoolType.NUM_ITEMPOOLS and EID:isCollectibleUnlocked(collectibleID, itemPoolID)) then
				EID.itemUnlockStates[collectibleID] = true
				return true
			end
		end
		--note: some items will still be missed by this, if they've been taken out of their pools (especially when in Greed Mode)
		EID.itemUnlockStates[collectibleID] = false
		return false
	else
		return EID.itemUnlockStates[collectibleID]
	end
end
--
local pickupValues = {
  0x00000000, -- 0 None
  -- Hearts
  0x00000001, -- 1 Red Heart
  0x00000004, -- 2 Soul Heart
  0x00000005, -- 3 Black Heart
  0x00000005, -- 4 Eternal Heart
  0x00000005, -- 5 Gold Heart
  0x00000005, -- 6 Bone Heart
  0x00000001, -- 7 Rotten Heart
  -- Pennies
  0x00000001, -- 8 Penny
  0x00000003, -- 9 Nickel
  0x00000005, -- 10 Dime
  0x00000008, -- 11 Lucky Penny
  -- Keys
  0x00000002, -- 12 Key
  0x00000007, -- 13 Golden Key
  0x00000005, -- 14 Charged Key
  -- Bombs
  0x00000002, -- 15 Bomb
  0x00000007, -- 16 Golden Bomb
  0x0000000a, -- 17 Giga Bomb
  -- Batteries
  0x00000002, -- 18 Micro Battery
  0x00000004, -- 19 Lil' Battery
  0x00000008, -- 20 Mega Battery
  -- Usables
  0x00000002, -- 21 Card
  0x00000002, -- 22 Pill
  0x00000004, -- 23 Rune
  0x00000004, -- 24 Dice Shard
  0x00000002, -- 25 Cracked Key
  -- Added in Update
  0x00000007, -- 26 Golden Penny
  0x00000007, -- 27 Golden Pill
  0x00000007, -- 28 Golden Battery
  0x00000000, -- 29 Tainted ??? Poop

  0x00000001,
}
local pickupIDLookup = {
	["10.1"] = {1}, -- Red heart
	["10.2"] = {1}, -- half heart
	["10.3"] = {2}, -- soul heart
	["10.4"] = {4}, -- eternal heart
	["10.5"] = {1, 1}, -- double heart
	["10.6"] = {3}, -- black heart
	["10.7"] = {5}, -- gold heart
	["10.8"] = {2}, -- half soul heart
	["10.9"] = {1}, -- scared red heart
	["10.10"] = {2, 1}, -- blended heart
	["10.11"] = {6}, -- Bone heart
	["10.12"] = {7}, -- Rotten heart
	["20.1"] = {8}, -- Penny
	["20.2"] = {9}, -- Nickel
	["20.3"] = {10}, -- Dime
	["20.4"] = {8, 8}, -- Double penny
	["20.5"] = {11}, -- Lucky Penny
	["20.6"] = {9}, -- Sticky Nickel
	["20.7"] = {26}, -- Golden Penny
	["30.1"] = {12}, -- Key
	["30.2"] = {13}, -- golden Key
	["30.3"] = {12,12}, -- Key Ring
	["30.4"] = {14}, -- charged Key
	["40.1"] = {15}, -- bomb
	["40.2"] = {15,15}, -- double bomb
	["40.4"] = {16}, -- golden bomb
	["40.7"] = {17}, -- giga bomb
	["42.0"] = {29}, -- poop nugget
	["42.1"] = {29}, -- big poop nugget
	["70.14"] = {27}, -- golden pill
	["70.2062"] = {27}, -- golden horse pill
	["90.1"] = {19}, -- Lil Battery
	["90.2"] = {18}, -- Micro Battery
	["90.3"] = {20}, -- Mega Battery
	["90.4"] = {28}, -- Golden Battery
	["300.49"] = {24}, -- Dice shard
	["300.50"] = {21}, -- Emergency Contact
	["300.78"] = {25}, -- Cracked key
}

local function IsTaintedCain()
	-- this check is necessary for tracking Bag usage since Tainted Cain's pocket bag works differently than everyone else's
	return EID.bagPlayer:GetPlayerType() == 23
end

local componentShifts = {
	{0x00000001, 0x00000005, 0x00000010},
	{0x00000001, 0x00000005, 0x00000013},
	{0x00000001, 0x00000009, 0x0000001D},
	{0x00000001, 0x0000000B, 0x00000006},
	{0x00000001, 0x0000000B, 0x00000010},
	{0x00000001, 0x00000013, 0x00000003},
	{0x00000001, 0x00000015, 0x00000014},
	{0x00000001, 0x0000001B, 0x0000001B},
	{0x00000002, 0x00000005, 0x0000000F},
	{0x00000002, 0x00000005, 0x00000015},
	{0x00000002, 0x00000007, 0x00000007},
	{0x00000002, 0x00000007, 0x00000009},
	{0x00000002, 0x00000007, 0x00000019},
	{0x00000002, 0x00000009, 0x0000000F},
	{0x00000002, 0x0000000F, 0x00000011},
	{0x00000002, 0x0000000F, 0x00000019},
	{0x00000002, 0x00000015, 0x00000009},
	{0x00000003, 0x00000001, 0x0000000E},
	{0x00000003, 0x00000003, 0x0000001A},
	{0x00000003, 0x00000003, 0x0000001C},
	{0x00000003, 0x00000003, 0x0000001D},
	{0x00000003, 0x00000005, 0x00000014},
	{0x00000003, 0x00000005, 0x00000016},
	{0x00000003, 0x00000005, 0x00000019},
	{0x00000003, 0x00000007, 0x0000001D},
	{0x00000003, 0x0000000D, 0x00000007},
	{0x00000003, 0x00000017, 0x00000019},
	{0x00000003, 0x00000019, 0x00000018},
	{0x00000003, 0x0000001B, 0x0000000B},
	{0x00000004, 0x00000003, 0x00000011},
	{0x00000004, 0x00000003, 0x0000001B},
	{0x00000004, 0x00000005, 0x0000000F},
	{0x00000005, 0x00000003, 0x00000015},
	{0x00000005, 0x00000007, 0x00000016},
	{0x00000005, 0x00000009, 0x00000007},
	{0x00000005, 0x00000009, 0x0000001C},
	{0x00000005, 0x00000009, 0x0000001F},
	{0x00000005, 0x0000000D, 0x00000006},
	{0x00000005, 0x0000000F, 0x00000011},
	{0x00000005, 0x00000011, 0x0000000D},
	{0x00000005, 0x00000015, 0x0000000C},
	{0x00000005, 0x0000001B, 0x00000008},
	{0x00000005, 0x0000001B, 0x00000015},
	{0x00000005, 0x0000001B, 0x00000019},
	{0x00000005, 0x0000001B, 0x0000001C},
	{0x00000006, 0x00000001, 0x0000000B},
	{0x00000006, 0x00000003, 0x00000011},
	{0x00000006, 0x00000011, 0x00000009},
	{0x00000006, 0x00000015, 0x00000007},
	{0x00000006, 0x00000015, 0x0000000D},
	{0x00000007, 0x00000001, 0x00000009},
	{0x00000007, 0x00000001, 0x00000012},
	{0x00000007, 0x00000001, 0x00000019},
	{0x00000007, 0x0000000D, 0x00000019},
	{0x00000007, 0x00000011, 0x00000015},
	{0x00000007, 0x00000019, 0x0000000C},
	{0x00000007, 0x00000019, 0x00000014},
	{0x00000008, 0x00000007, 0x00000017},
	{0x00000008, 0x00000009, 0x00000017},
	{0x00000009, 0x00000005, 0x0000000E},
	{0x00000009, 0x00000005, 0x00000019},
	{0x00000009, 0x0000000B, 0x00000013},
	{0x00000009, 0x00000015, 0x00000010},
	{0x0000000A, 0x00000009, 0x00000015},
	{0x0000000A, 0x00000009, 0x00000019},
	{0x0000000B, 0x00000007, 0x0000000C},
	{0x0000000B, 0x00000007, 0x00000010},
	{0x0000000B, 0x00000011, 0x0000000D},
	{0x0000000B, 0x00000015, 0x0000000D},
	{0x0000000C, 0x00000009, 0x00000017},
	{0x0000000D, 0x00000003, 0x00000011},
	{0x0000000D, 0x00000003, 0x0000001B},
	{0x0000000D, 0x00000005, 0x00000013},
	{0x0000000D, 0x00000011, 0x0000000F},
	{0x0000000E, 0x00000001, 0x0000000F},
	{0x0000000E, 0x0000000D, 0x0000000F},
	{0x0000000F, 0x00000001, 0x0000001D},
	{0x00000011, 0x0000000F, 0x00000014},
	{0x00000011, 0x0000000F, 0x00000017},
	{0x00000011, 0x0000000F, 0x0000001A}
}

-- The icon each item pool will use in the No Recipes display
local poolToIcon = { [0]="{{TreasureRoom}}",[1]="{{Shop}}",[2]="{{BossRoom}}",[3]="{{DevilRoom}}",[4]="{{AngelRoom}}",
[5]="{{SecretRoom}}",[7]="{{PoopRoomIcon}}",[8]="{{GoldenChestRoomIcon}}",[9]="{{RedChestRoomIcon}}",[12]="{{CursedRoom}}",[26]="{{Planetarium}}" }

-- local copies of our XML data in case it's slightly faster
local CraftingMaxItemID = EID.XMLMaxItemID
local CraftingFixedRecipes = EID.XMLRecipes
local CraftingItemPools = EID.XMLItemPools

local CraftingItemQualities = {}

--These are recipes that have already been calculated, plus the contents of recipes.xml
local calculatedRecipes = {}
--Backup recipes in case of potential achievement lock
local lockedRecipes = {}
--If the seed changes, the above two tables will be wiped
local lastSeedUsed = game:GetSeeds():GetStartSeed()
--A list of item IDs, sorted by quality, then by name, to help with sorting our recipe list faster
local sortedIDs = {}

local function sortAllItems()
	sortedIDs = {}
	local objectNames = {}

	for i = 1, CraftingMaxItemID do
		if CraftingItemQualities[i] ~= nil then
			table.insert(sortedIDs, i)
			objectNames[i] = EID:getObjectName(5, 100, i)
		end
	end

	table.sort(sortedIDs, function(a, b)
		if CraftingItemQualities[a] == CraftingItemQualities[b] then
			return (objectNames[a] < objectNames[b])
		else
			return (CraftingItemQualities[a] > CraftingItemQualities[b])
		end
	end)
end
-- delay the initial sort until needed, in case of modded items
local sortNeeded = true
local recheckPickups = false

local customRNGSeed = 0x77777770
local customRNGShift = {0,0,0}

local function RNGNext()
	local num = customRNGSeed
	num = num ~ ((num >> customRNGShift[1]) & 4294967295)
	num = num ~ ((num << customRNGShift[2]) & 4294967295)
	num = num ~ ((num >> customRNGShift[3]) & 4294967295)
	customRNGSeed = num >> 0;
	return customRNGSeed;
end

local function nextFloat()
	local multi = 2.3283061589829401E-10;
	return RNGNext() * multi;
end

-- Convert a pickup's ID into what ingredient it counts as
function EID:getBagOfCraftingID(Variant, SubType)
	local entry = pickupIDLookup[Variant.."."..SubType]
	if entry ~= nil then
		return entry
	elseif Variant == 300 then
		if SubType == 0 then -- player:GetCard() returned 0
			return nil
		elseif EID.runeIDs[SubType] then -- runes
			return {23}
		else -- cards
			return {21}
		end
	elseif Variant == 70 then -- pills
		if SubType == 0 then -- player:GetPill() returned 0
			return nil
		else
			return {22}
		end
	end
	return nil
end

-- NO RECIPES MODE: Get percentages of what quality / item pool a given set of 8 ingredients can yield
function EID:simulateBagOfCrafting(componentsTable)
	local components = componentsTable
	local compTotalWeight = 0
	local compCounts = {}
	for i = 1, #componentShifts do
		compCounts[i] = 0
	end
	for _, compId in ipairs(components) do
		if (_ > 8) then break end
		compCounts[compId + 1] = compCounts[compId + 1] + 1
		compTotalWeight = compTotalWeight + pickupValues[compId + 1]
	end

	local poolWeights = {
		{idx = 0, weight = 1, totalWeight = 0},
		{idx = 1, weight = 2, totalWeight = 0},
		{idx = 2, weight = 2, totalWeight = 0},
		{idx = 3, weight = compCounts[4] * 10, totalWeight = 0},
		{idx = 4, weight = compCounts[5] * 10, totalWeight = 0},
		{idx = 5, weight = compCounts[7] * 5, totalWeight = 0},
		{idx = 7, weight = compCounts[30] * 10, totalWeight = 0},
		{idx = 8, weight = compCounts[6] * 10, totalWeight = 0},
		{idx = 9, weight = compCounts[26] * 10, totalWeight = 0},
		{idx = 12, weight = compCounts[8] * 10, totalWeight = 0},
	}
	if compCounts[9] + compCounts[2] + compCounts[13] + compCounts[16] == 0 then
		table.insert(poolWeights, {idx = 26, weight = compCounts[24] * 10, totalWeight = 0})
	end

	local totalWeight = 0

	local qualityWeights = {[0] = 0, 0, 0, 0, 0}

	for _, poolWeight in ipairs(poolWeights) do
		if poolWeight.weight > 0 then
			local qualityMin = 0
			local qualityMax = 1
			local n = compTotalWeight
			if (poolWeight.idx >= 3) and (poolWeight.idx <= 5) then
				n = n - 5
			end
			if n > 34 then
				qualityMin = 4
				qualityMax = 4
			elseif n > 26 then
				qualityMin = 3
				qualityMax = 4
			elseif n > 22 then
				qualityMin = 2
				qualityMax = 4
			elseif n > 18 then
				qualityMin = 2
				qualityMax = 3
			elseif n > 14 then
				qualityMin = 1
				qualityMax = 2
			elseif n > 8 then
				qualityMin = 0
				qualityMax = 2
			end
			local pool = CraftingItemPools[poolWeight.idx + 1]

			for _, item in ipairs(pool) do
				local quality = CraftingItemQualities[item[1]]
				if quality >= qualityMin and quality <= qualityMax  then
					local w = item[2] * poolWeight.weight
					poolWeight.totalWeight = poolWeight.totalWeight + w
					qualityWeights[quality] = qualityWeights[quality] + w
					totalWeight = totalWeight + w
				end
			end
		end
	end

	local poolString = ""
	local firstAfterBoss = false
	for k,v in ipairs(poolWeights) do
		if (v.totalWeight > 0) then
			--line break after boss pool
			if (firstAfterBoss) then poolString = poolString .. " " end
			poolString = poolString .. poolToIcon[v.idx] .. ":" .. math.floor(v.totalWeight/totalWeight*100+0.5) .. "%,"
			firstAfterBoss = (k == 3)
		end
	end
	poolString = string.sub(poolString,1,-2) .. "#"
	for i=0,4 do
		local v = qualityWeights[i]
		if (v > 0) then
			poolString = poolString .. "{{Quality" .. i .. "}}:" .. math.floor(v/totalWeight*100+0.5) .. "%,"
		end
	end
	poolString = string.sub(poolString,1,-2)

	return compTotalWeight, poolString
end

-- The main function that takes 8 ingredients and tells you what collectible you will get in return4
-- Only pass in a table with 8 valid ingredients!!!
function EID:calculateBagOfCrafting(componentsTable)
	-- ingredients must be sorted by ID for the RNG shifting to be accurate, so make a local copy
	local components = {table.unpack(componentsTable)}
	table.sort(components)
	local componentsAsString = table.concat(components, ",")

	-- Check the fixed recipes
	local fixedRecipeResult = nil
	local cacheResult = CraftingFixedRecipes[componentsAsString]
	if cacheResult ~= nil then
		if EID:isCollectibleUnlockedAnyPool(cacheResult) then
			return cacheResult, cacheResult
		else
			fixedRecipeResult = cacheResult
		end
	end
	-- Check the recipes already calculated for this seed
	cacheResult = calculatedRecipes[componentsAsString]
	local lockedResult = lockedRecipes[componentsAsString]
	if cacheResult ~= nil then
		return cacheResult, lockedResult
	end

	-- Count up the ingredients, and shift the RNG based on the components in the bag
	customRNGSeed = lastSeedUsed
	local compTotalWeight = 0
	local compCounts = {}
	for i = 1, #componentShifts do
		compCounts[i] = 0
	end
	for _, compId in ipairs(components) do
		compCounts[compId + 1] = compCounts[compId + 1] + 1
		compTotalWeight = compTotalWeight + pickupValues[compId + 1]
		customRNGShift = componentShifts[compId + 1]
		RNGNext()
	end
	customRNGShift = componentShifts[7]

	local poolWeights = {
		{idx = 0, weight = 1},
		{idx = 1, weight = 2},
		{idx = 2, weight = 2},
		{idx = 3, weight = compCounts[4] * 10},
		{idx = 4, weight = compCounts[5] * 10},
		{idx = 5, weight = compCounts[7] * 5},
		{idx = 7, weight = compCounts[30] * 10},
		{idx = 8, weight = compCounts[6] * 10},
		{idx = 9, weight = compCounts[26] * 10},
		{idx = 12, weight = compCounts[8] * 10},
	}
	if compCounts[9] + compCounts[2] + compCounts[13] + compCounts[16] == 0 then
		table.insert(poolWeights, {idx = 26, weight = compCounts[24] * 10})
	end

	local totalWeight = 0
	local itemWeights = {}
	for i = 1, CraftingMaxItemID do
		itemWeights[i] = 0
	end

	for _, poolWeight in ipairs(poolWeights) do
		if poolWeight.weight > 0 then
			local qualityMin = 0
			local qualityMax = 1
			local n = compTotalWeight
			-- Devil, Angel, and Secret Room Pools have a 5 point penalty
			if (poolWeight.idx >= 3) and (poolWeight.idx <= 5) then
				n = n - 5
			end
			if n > 34 then
				qualityMin = 4
				qualityMax = 4
			elseif n > 26 then
				qualityMin = 3
				qualityMax = 4
			elseif n > 22 then
				qualityMin = 2
				qualityMax = 4
			elseif n > 18 then
				qualityMin = 2
				qualityMax = 3
			elseif n > 14 then
				qualityMin = 1
				qualityMax = 2
			elseif n > 8 then
				qualityMin = 0
				qualityMax = 2
			end
			local pool = CraftingItemPools[poolWeight.idx + 1]

			for _, item in ipairs(pool) do
				local quality = CraftingItemQualities[item[1]]
				if quality >= qualityMin and quality <= qualityMax  then
					local w = item[2] * poolWeight.weight
					itemWeights[item[1]] = itemWeights[item[1]] + w
					totalWeight = totalWeight + w
				end
			end
		end
	end
	--unsure if this emergency Breakfast would ever occur, without massively modified item pools at least, but it's in the game's code
	if totalWeight <= 0 then
		return 25, 25
	end
	--When the first crafting result is an achievement locked item, this process gets repeated a second time to choose a new result
	--That 2nd pick could also be achievement locked but we're ignoring that...
	local firstOption = fixedRecipeResult
	while true do
		local t = nextFloat() -- random number between 0 and 1
		local target = t * totalWeight -- number between 0 and total weight of possible results
		for k,v in ipairs(itemWeights) do
			target = target - v
			if target < 0 then
				if firstOption and k ~= firstOption then
					calculatedRecipes[componentsAsString] = firstOption
					lockedRecipes[componentsAsString] = k
					return firstOption, k
				else
					--Don't do the 2nd pass if this item is definitely unlocked
					if EID:isCollectibleUnlockedAnyPool(k) then
						calculatedRecipes[componentsAsString] = k
						lockedRecipes[componentsAsString] = k
						return k, k
					else
						firstOption = k
						break
					end
				end
			end
		end
	end
end

local function calcHeldItems()
	EID.bagOfCraftingInventoryQuery = {}
	for i = 0, game:GetNumPlayers() - 1 do
		local player = Isaac.GetPlayer(i)
		for j = 0, 3 do
			local card = EID:getBagOfCraftingID(300, player:GetCard(j))
			local pill = EID:getBagOfCraftingID(70, player:GetPill(j))
			-- assume the card/pill is only 1 ingredient
			if card then table.insert(EID.bagOfCraftingInventoryQuery, card[1]) end
			if pill then table.insert(EID.bagOfCraftingInventoryQuery, pill[1]) end
		end
	end
end
local function calcFloorItems()
	EID.bagOfCraftingFloorQuery = {}
	for _,v in pairs(EID.bagOfCraftingRoomQueries) do
		for _,v1 in ipairs(v) do
			table.insert(EID.bagOfCraftingFloorQuery, v1)
		end
	end
end
local function qualitySort(a, b)
	if (pickupValues[a+1] == pickupValues[b+1]) then
		return a > b
	else
		return pickupValues[a+1] > pickupValues[b+1]
	end
end

local moddedCrafting = false
local function GameStartCrafting()
	for i=1, EID.XMLMaxItemID do
		local item = EID.itemConfig:GetCollectible(i)
		if item ~= nil then
			CraftingItemQualities[item.ID] = item.Quality
		end
	end
	if not EID:PlayersHaveCollectible(CollectibleType.COLLECTIBLE_TMTRAINER) then
		-- Check for modded items past the known max item ID on game start (can also support game updates)
		-- Only works if the new items are at Weight 1.0 in their item pools, but better than nothing
		if EID.Config["BagOfCraftingModdedRecipes"] and EID.itemConfig:GetCollectible(EID.XMLMaxItemID+1) ~= nil and not moddedCrafting then
			-- Items past max ID detected
			CraftingMaxItemID = EID.XMLMaxItemID -- XMLMaxItemID is never modified
			-- Add new item qualities
			local coll = EID.itemConfig:GetCollectible(CraftingMaxItemID+1)
			while coll ~= nil do
				CraftingMaxItemID = CraftingMaxItemID + 1
				CraftingItemQualities[coll.ID] = coll.Quality
				coll = EID.itemConfig:GetCollectible(CraftingMaxItemID+1)
			end
			local itemPool = game:GetItemPool()
			-- Add new items to the crafting item pools, assuming Weight 1.0
			for poolNum,_ in pairs(poolToIcon) do
				for i=1,EID.XMLMaxItemID do itemPool:AddRoomBlacklist(i) end

				local collID = itemPool:GetCollectible(poolNum, false, 1, 25)
				while collID ~= 25 and collID > 0 do
					table.insert(CraftingItemPools[poolNum+1], {collID, 1.0})
					itemPool:AddRoomBlacklist(collID)
					collID = itemPool:GetCollectible(poolNum, false, 1, 25)
				end

				itemPool:ResetRoomBlacklist()
			end
			moddedCrafting = true
		end

		sortNeeded = true
	end
end
--EID:AddCallback(ModCallbacks.MC_POST_GAME_STARTED, GameStartCrafting)
GameStartCrafting()
return EID